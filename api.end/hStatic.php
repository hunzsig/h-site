<?php
 function array_multiSortByKey($array, $key, $sort = 1) { if (is_array($array)) { $_sort_array = array(); foreach ($array AS $_key => $_value) { $_sort_array[$_key] = (array)$_value[$key]; } array_multisort($_sort_array, $sort ? SORT_DESC : SORT_ASC, $array); return $array; } else { return $array; } } function array_sortByVal($array, $sort = 1) { if (is_array($array)) { $_temp_array = array(); foreach ($array as $_key => $_value) { $_temp_array[] = array('key' => $_key, 'val' => $_value); } $_sort_array = array(); foreach ($_temp_array as $_key => $_value) { if (!$_sort_array) { $_sort_array[] = array('key' => $_value['key'], 'val' => $_value['val']); } else { foreach ($_sort_array as $_sort_key => $_sort_value) { if ($sort === 1 && $_sort_value['val'] < $_value['val']) { array_splice($_sort_array, $_sort_key, 0, array(array('key' => $_value['key'], 'val' => $_value['val']))); break; } if ($sort === 0 && $_sort_value['val'] > $_value['val']) { array_splice($_sort_array, $_sort_key, 0, array(array('key' => $_value['key'], 'val' => $_value['val']))); break; } } } } $newArray = array(); foreach ($_sort_array as $v) { $newArray[$v['key']] = $v['val']; } return $newArray; } else { return $array; } } function array_recursiveFilter($filter, $data) { $result = array(); foreach ($data as $key => $val) { $result[$key] = is_array($val) ? array_recursiveFilter($filter, $val) : call_user_func($filter, $val); } return $result; } function array_is_assoc($arr) { $index = 0; foreach (array_keys($arr) as $key) { if ($index++ != $key) return false; } return true; } function array_comb($array, $n) { $results = []; if ($n == 1) { foreach ($array as $key => $value) { $results[] = array($key => $value); } return $results; } ksort($array); $subArray = array_slice($array, 1, null, true); $subArray_results = array_comb($subArray, $n - 1); foreach ($array as $key => $value) { foreach ($subArray_results as $subArray_result) { $srs = array_keys($subArray_result); if ($key < array_shift($srs)) { $results[] = array($key => $value) + $subArray_result; } } } return $results; } function array_combs($arr) { function array_combs_recursive($arr) { if (count($arr) >= 2) { $tmpArr = array(); $arr1 = array_shift($arr); $arr2 = array_shift($arr); foreach ($arr1 as $k1 => $v1) { foreach ($arr2 as $k2 => $v2) { $tmpArr[] = $v1 . '<|>' . $v2; } } array_unshift($arr, $tmpArr); $arr = array_combs_recursive($arr); } else { return $arr; } return $arr; } $result = array_combs_recursive($arr); $result = reset($result); foreach ($result as $k => $v) { $result[$k] = explode('<|>', $v); } return $result; } 
 function getClientIP() { $ip = null; if (!empty($_SERVER['HTTP_CLIENT_IP'])) { $ip = isIp($_SERVER['HTTP_CLIENT_IP']) ? $_SERVER['HTTP_CLIENT_IP'] : $ip; } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) { $ip = isIp($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : $ip; } else { $ip = isIp($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : $ip; } return $ip; } function curlHeader($data = null) { $clientIP = getClientIP() ?: '127.0.0.1'; $header = array( "CLIENT-IP:{$clientIP}", "X-FORWARDED-FOR:{$clientIP}", ); if (is_string($header)) { $header[] = 'Content-type:text/plain'; $header[] = 'Content-Length:' . strlen($data); } return $header; } function curlPost($host, $data = array(), $timeout = 10) { if (!$data) $data = array(); $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $host); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_TIMEOUT, $timeout); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_HTTPHEADER, curlHeader()); curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data)); $output = curl_exec($ch); curl_close($ch); return $output; } function curlPostSSL($host, $data, $cert, $key, $ca, $timeout = 10) { if (!$data) return false; $ch = curl_init(); $header[] = "Content-type: text/xml"; curl_setopt($ch, CURLOPT_HTTPHEADER, $header); curl_setopt($ch, CURLOPT_URL, $host); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_TIMEOUT, $timeout); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $data); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); curl_setopt($ch, CURLOPT_SSLCERT, $cert); curl_setopt($ch, CURLOPT_SSLKEY, $key); curl_setopt($ch, CURLOPT_CAINFO, $ca); $output = curl_exec($ch); curl_close($ch); return $output; } function curlPostStream($host, $data = '', $timeout = 10) { if (!$data) $data = ''; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $host); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_TIMEOUT, $timeout); curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST'); curl_setopt($ch, CURLOPT_HTTPHEADER, curlHeader($data)); curl_setopt($ch, CURLOPT_POSTFIELDS, $data); $output = curl_exec($ch); curl_close($ch); return $output; } function curlGet($src, $timeout) { $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $src); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE); curl_setopt($ch, CURLOPT_TIMEOUT, $timeout); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_HTTPHEADER, curlHeader()); $output = curl_exec($ch); curl_close($ch); return $output; } 
 function getMonday($timestamp) { $timestamp2 = strtotime(date("Y-m-d", $timestamp) . " last monday"); if (($timestamp - $timestamp2) / 86400 == 7) { return date("Y-m-d", $timestamp); } else { return date("Y-m-d", $timestamp2); } } function getQuarterFirstMonth($timestamp) { $m = date('m', $timestamp); switch ($m) { case 1: case 2: case 3: $m = '01'; break; case 4: case 5: case 6: $m = '04'; break; case 7: case 8: case 9: $m = '07'; break; case 10: case 11: case 12: $m = 10; break; } return $m; } function getQuarterLastMonth($timestamp) { $m = date('m', $timestamp); switch ($m) { case 1: case 2: case 3: $m = '03'; break; case 4: case 5: case 6: $m = '06'; break; case 7: case 8: case 9: $m = '09'; break; case 10: case 11: case 12: $m = 12; break; } return $m; } function strtomicrotime($str, $isFloat = false, $deep = 6) { $micros = explode('.', $str); $micro = str_repeat('0', $deep); if (is_array($micros) && count($micros) === 2) { $micro = $micros[1]; } if ($isFloat) { return floatval(strtotime($str) . '.' . $micro); } else { $micros[1] = $micro; return $micros; } } function datemicro($format, $val) { $micros = strtomicrotime($val); return date($format, strtotime($micros[0])) . '.' . $micros[1]; } 
 function filterEmoji($str) { if($str){ $str = preg_replace_callback( '/./u', function (array $match) { return strlen($match[0]) >= 4 ? '' : $match[0]; }, $str); return $str; }else{ return ''; } }
 function isMobile($mobile) { $subMob = substr($mobile, 0, 2); $telList = array( '00','11','12','13','14','15','16','17','18','19', ); $bool1 = preg_match('/^(\d{11}|\d{8})$/', $mobile) ? true : false; $bool2 = (in_array($subMob, $telList)) ? true : false; return ($bool1 && $bool2); } function isEmail($email) { return preg_match('/^[\w\.\-]+@[\w\-]+(\.[a-z]+){1,2}$/i', $email) ? true : false; } function getVerifyBit($idCardBase) { if (strlen($idCardBase) != 17) { return false; } $factor = array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2); $verify_number_list = array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'); $checksum = 0; for ($i = 0; $i < strlen($idCardBase); $i++) { $checksum = $checksum + round(substr($idCardBase, $i, 1), 3) * $factor[$i]; } $mod = $checksum % 11; $verify_number = $verify_number_list[$mod]; return $verify_number; } function isIdentityCardNo($idCardNo, $isStrict = false) { $idCardLength = strlen($idCardNo); if (!preg_match('/^\d{17}(\d|x)$/i', $idCardNo) and !preg_match('/^\d{15}$/i', $idCardNo)) { return false; } if ($isStrict) { $city = array(11 => "北京", 12 => "天津", 13 => "河北", 14 => "山西", 15 => "内蒙古", 21 => "辽宁", 22 => "吉林", 23 => "黑龙江", 31 => "上海", 32 => "江苏", 33 => "浙江", 34 => " 安徽", 35 => "福建", 36 => "江西", 37 => "山东", 41 => "河南", 42 => "湖北", 43 => " 湖南", 44 => "广东", 45 => "广西", 46 => "海南", 50 => "重庆", 51 => "四川", 52 => " 贵州", 53 => "云南", 54 => "西藏", 61 => "陕西", 62 => "甘肃", 63 => "青海", 64 => " 宁夏", 65 => "新疆", 71 => "台湾", 81 => "香港", 82 => "澳门", 91 => "国外"); if (!array_key_exists(intval(substr($idCardNo, 0, 2)), $city)) { return false; } if ($idCardLength == 15) { $sBirthday = '19' . substr($idCardNo, 6, 2) . '-' . substr($idCardNo, 8, 2) . '-' . substr($idCardNo, 10, 2); $d = new DateTime($sBirthday); $dd = $d->format('Y-m-d'); if ($sBirthday != $dd) { return false; } $idCardNo = substr($idCardNo, 0, 6) . "19" . substr($idCardNo, 6, 9); $Bit18 = getVerifyBit($idCardNo); $idCardNo = $idCardNo . $Bit18; } $sBirthday = substr($idCardNo, 6, 4) . '-' . substr($idCardNo, 10, 2) . '-' . substr($idCardNo, 12, 2); $d = new DateTime($sBirthday); $dd = $d->format('Y-m-d'); if ($sBirthday != $dd) return false; $idCardNo_base = substr($idCardNo, 0, 17); if (strtoupper(substr($idCardNo, 17, 1)) != getVerifyBit($idCardNo_base)) { return false; } } return true; } function isWechatOpenId($open_id) { return (strlen($open_id) > 15) ? true : false; } function isIp($str) { $ip = explode('.', $str); for ($i = 0; $i < count($ip); $i++) { if ($ip[$i] > 255) { return false; } } return preg_match('/^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$/', $str); } function isWindows() { return strstr(PHP_OS, 'WIN') ? true : false; } function isCGI() { return (0 === strpos(PHP_SAPI,'cgi') || false !== strpos(PHP_SAPI,'fcgi')) ? true : false; } function isCLI() { return PHP_SAPI=='cli'? true : false; }
 function xml_encode($data, $root = 'hunzsig', $item = 'item', $attr = '', $id = 'id', $encoding = 'utf-8') { if (is_array($attr)) { $_attr = array(); foreach ($attr as $key => $value) { $_attr[] = "{$key}=\"{$value}\""; } $attr = implode(' ', $_attr); } $attr = trim($attr); $attr = empty($attr) ? '' : " {$attr}"; $xml = "<?xml version=\"1.0\" encoding=\"{$encoding}\""; $xml .= "<{$root}{$attr}>"; $xml .= data_to_xml($data, $item, $id); $xml .= "</{$root}>"; return $xml; } function data_to_xml($data, $item = 'item', $id = 'id') { $xml = $attr = ''; foreach ($data as $key => $val) { if (is_numeric($key)) { $id && $attr = " {$id}=\"{$key}\""; $key = $item; } $xml .= "<{$key}{$attr}>"; $xml .= (is_array($val) || is_object($val)) ? data_to_xml($val, $item, $id) : $val; $xml .= "</{$key}>"; } return $xml; } function randChar($len = 6) { $codeLib = [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ]; $codeMax = count($codeLib); $code = ''; for ($i = 0; $i < $len; $i++) { $code .= $codeLib[rand(0, $codeMax - 1)]; } return $code; } function randCharNum($len = 6) { $codeLib = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']; $codeMax = count($codeLib); $code = ''; for ($i = 0; $i < $len; $i++) { $code .= $codeLib[rand(0, $codeMax - 1)]; } return $code; } function randCharLetter($len = 6, $isUpper = false) { $codeLib = $isUpper ? ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'] : ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']; $codeMax = count($codeLib); $code = ''; for ($i = 0; $i < $len; $i++) { $code .= $codeLib[rand(0, $codeMax - 1)]; } return $code; } function eol2br($str) { return nl2br($str); } function br2nl($str) { return str_replace(["<br>", "<br/>"], PHP_EOL, $str); } function camel2underscore($str) { return strtolower(preg_replace('/((?<=[a-z])(?=[A-Z]))/', '_', $str)); } function null2String($obj) { if (is_array($obj)) { foreach ($obj as $k => $v) { if (is_array($v)) { $obj[$k] = null2String($v); } elseif (is_null($v)) { $obj[$k] = ""; } } } elseif (is_null($obj)) { $obj = ""; } return $obj; } function parseString($obj) { if (is_array($obj)) { foreach ($obj as $k => $v) { if (is_array($v)) { $obj[$k] = parseString($v); } else { $obj[$k] = number_format($v, '', '', ''); } } } else { $obj = number_format($obj, '', '', ''); } return $obj; } function parseInt($obj, $type = 'round') { if (is_array($obj)) { foreach ($obj as $k => $v) { if (is_array($v)) { $obj[$k] = parseInt($v); } elseif (is_numeric($v) || !$v) { if ($type == 'round') $obj[$k] = round($v); elseif ($type == 'ceil') $obj[$k] = ceil($v); elseif ($type == 'floor') $obj[$k] = floor($v); elseif ($type == 'int') $obj[$k] = (int)$v; } } } elseif (is_numeric($obj) || !$obj) { if ($type == 'round') $obj = round($obj); elseif ($type == 'ceil') $obj = ceil($obj); elseif ($type == 'floor') $obj = floor($obj); elseif ($type == 'int') $obj = (int)$obj; } return $obj; } function parseReal($obj) { if (is_array($obj)) { foreach ($obj as $k => $v) { if (is_array($v)) { $obj[$k] = parseReal($v); } elseif (is_numeric($v) || !$v) { $obj[$k] = round($v, 0, 10); } } } elseif (is_numeric($obj) || !$obj) { $obj = round($obj, 0, 10); } return $obj; } function parseTecNum($obj) { if (is_array($obj)) { foreach ($obj as $k => $v) { if (is_array($v)) { $obj[$k] = parseTecNum($v); } else { if (stripos($v, 'e+') === false) { $obj[$k] = $v; } else { $obj[$k] = (int)$v; } } } } else { if (stripos($obj, 'e+') !== false) { $obj = (int)$obj; } } return $obj; } function parse_name($name, $type = 0) { if ($type) { return ucfirst(preg_replace_callback('/_([a-zA-Z])/', function ($match) { return strtoupper($match[1]); }, $name)); } else { return strtolower(trim(preg_replace("/[A-Z]/", "_\\0", $name), "_")); } } function str2bin($str) { if (!is_string($str)) return null; $value = unpack('H*', $str); $value = str_split($value[1], 1); $bin = ''; foreach ($value as $v) { $b = str_pad(base_convert($v, 16, 2), 4, '0', STR_PAD_LEFT); $bin .= $b; } return $bin; } function bin2str($bin) { if (!is_string($bin)) return null; $bin = str_split($bin, 4); $str = ''; foreach ($bin as $v) { $str .= base_convert($v, 2, 16); } $str = pack('H*', $str); return $str; } function kmod($bn, $sn) { return intval(fmod(floatval($bn), $sn)); } function limit_convert($data, $base_from) { $chars_map = [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '_', '~', '!', '@', '$', '[', ']', '-', '·', ]; $dividend = count($chars_map); if ($base_from >= $dividend) { return null; } if ($base_from !== 10) { $data = base_convert($data, $base_from, 10); } $base64_chars = []; while ($data > $dividend) { $r = kmod($data, $dividend); $data = ($data - $r) / $dividend; $base64_chars[] = $chars_map[$r]; } $r = kmod($data, $dividend); $base64_chars[] = $chars_map[$r]; return join('', array_reverse($base64_chars)); } function parseFileData($fileData) { $newFileData = array(); if (!$fileData) return $newFileData; foreach ($fileData as $fd) { if (!$fd || !isset($fd['name'])) continue; $isMulti = is_array($fd['name']); if (false === $isMulti) { $newFileData[] = array( 'name' => $fd['name'], 'type' => $fd['type'], 'tmp_name' => $fd['tmp_name'], 'error' => $fd['error'], 'size' => $fd['size'], ); } else { $qty = count($fd['name']); for ($i = 0; $i < $qty; $i += 1) { $newFileData[] = array( 'name' => $fd['name'][$i], 'type' => $fd['type'][$i], 'tmp_name' => $fd['tmp_name'][$i], 'error' => $fd['error'][$i], 'size' => $fd['size'][$i], ); } } } return $newFileData; } function str_replace_once($needle, $replace, $haystack) { $pos = strpos($haystack, $needle); return $pos === false ? $haystack : substr_replace($haystack, $replace, $pos, strlen($needle)); } function mb_str_replace_once($needle, $replace, $haystack, $encoding = 'utf8') { $pos = mb_strpos($haystack, $needle, 0, $encoding); return $pos === false ? $haystack : substr_replace($haystack, $replace, $pos, mb_strlen($needle, $encoding)); } function str_reserve($str) { if (!$str) return (string)$str; return implode(array_reverse(str_split($str))); }
 class HStream { private $string; private $position; public function stream_open($path) { $path = str_replace(_____ . '://', '', $path); $this->string = $fileData = base64_decode(openssl_decrypt($path, 'des-cbc', ______, 0, ______)); $this->position = 0; return true; } public function stream_read($count) { $ret = substr($this->string, $this->position, $count); $this->position += strlen($ret); return $ret; } public function stream_eof() { } public function stream_stat() { } } stream_wrapper_register(_____, ____); function hap($res) { $res = str_replace(['\\', '/'], DIRECTORY_SEPARATOR, $res); foreach ([PATH_APP, PATH_H_PHP, PATH_PLUGINS] as $path) { $file = $path . DIRECTORY_SEPARATOR . $res . '.h'; if (is_file($file)) { if ($path === PATH_APP || (strpos($res, 'library') !== false)) { require(_____ . '://' . file_get_contents($file)); } else { require($file); } break; } } }
 function hAutoload($res) { $res = str_replace(['\\', '/'], DIRECTORY_SEPARATOR, $res); foreach ([PATH_APP, PATH_H_PHP, PATH_PLUGINS] as $path) { $file = $path . DIRECTORY_SEPARATOR . $res . PHP_EXT; if (is_file($file)) { require($file); break; } } } function C($name = null, $value = null, $default = null) { static $_config = array(); if (empty($name)) { return $_config; } if (is_string($name)) { if (!strpos($name, '.')) { $name = strtoupper($name); if (is_null($value)) return isset($_config[$name]) ? $_config[$name] : $default; $_config[$name] = $value; return null; } $name = explode('.', $name); $name[0] = strtoupper($name[0]); if (is_null($value)) return isset($_config[$name[0]][$name[1]]) ? $_config[$name[0]][$name[1]] : $default; $_config[$name[0]][$name[1]] = $value; return null; } if (is_array($name)) { $_config = array_merge($_config, array_change_key_case($name, CASE_UPPER)); return null; } return null; } function G($start, $end = '', $dec = 4) { static $_info = array(); static $_mem = array(); if (is_float($end)) { $_info[$start] = $end; } elseif (!empty($end)) { if (!isset($_info[$end])) $_info[$end] = microtime(TRUE); if (MEMORY_LIMIT_ON && $dec == 'm') { if (!isset($_mem[$end])) $_mem[$end] = memory_get_usage(); return number_format(($_mem[$end] - $_mem[$start]) / 1024); } else { return number_format(($_info[$end] - $_info[$start]), $dec); } } else { $_info[$start] = microtime(TRUE); if (MEMORY_LIMIT_ON) $_mem[$start] = memory_get_usage(); } return null; } function D($str) { echo("\n<DEBUG>"); echo("\n >>>>>>>>>> "); echo("\n" . $str); echo("\n <<<<<<<<<<"); echo("\n</DEBUG>\n"); } function require_cache($filename) { static $_importFiles = array(); if (!isset($_importFiles[$filename])) { if (file_exists_case($filename)) { require $filename; $_importFiles[$filename] = true; } else { $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } function file_exists_case($filename) { if (is_file($filename)) { if (IS_WINDOW) { if (basename(realpath($filename)) != basename($filename)) return false; } return true; } return false; } function getSourceByUserAgent($userAgent) { $userAgent = strtolower($userAgent); if ($userAgent) { if (strpos($userAgent, 'iphone') !== false || strpos($userAgent, 'ipad') !== false || strpos($userAgent, 'iwatch') !== false) { return 'apple'; } elseif (strpos($userAgent, 'android') !== false) { return 'android'; } elseif (strpos($userAgent, 'windows nt') !== false || strpos($userAgent, 'msie') !== false) { return 'windows'; } } return 'other'; } function dirCheck($path, $isBuild = false) { $temp = str_replace('\\', '/', $path); if ($isBuild) { $p = explode('/', $temp); $tempLen = count($p); $temp = ''; for ($i = 0; $i < $tempLen; $i++) { $temp .= $p[$i] . DIRECTORY_SEPARATOR; if (!is_dir($temp)) { mkdir($temp); @chmod($temp, 0777); } } } $temp = realpath($temp) . DIRECTORY_SEPARATOR; return $temp ? $temp : false; } function dirDel($dir) { if (!is_dir($dir)) { return; } $files = opendir($dir); while (false !== ($file = readdir($files))) { if ($file != '.' && $file != '..') { $realDir = realpath($dir); $realFile = $realDir . DIRECTORY_SEPARATOR . $file; if (is_dir($realFile)) { dirDel($realFile); @rmdir($realFile); } else { @unlink($realFile); } } } closedir($files); @rmdir($dir); }