<?php
 namespace plugins\Alipay\WapV2; class AlipayNotify extends AbstractLib{ private $https_verify_url = 'https://mapi.alipay.com/gateway.do?service=notify_verify&'; private $http_verify_url = 'http://notify.alipay.com/trade/notify_query.do?'; private $alipay_config; public function __construct($alipay_config = null){ $alipay_config && $this->alipay_config = $alipay_config; } public function setConfig($alipay_config){ $this->alipay_config = $alipay_config; } public function AlipayNotify($alipay_config) { $this->__construct($alipay_config); } public function verifyNotify($data) { if(empty($data)) { return false; } $isSign = $this->getSignVeryfy($data, $data["sign"]); return $isSign; } function getSignVeryfy($para_temp, $sign) { $para_filter = $this->getCore()->paraFilter($para_temp); $para_sort = $this->getCore()->argSort($para_filter); $prestr = $this->getCore()->createLinkstring($para_sort); $isSign = false; switch (strtoupper(trim($this->alipay_config['sign_type']))) { case "RSA" : $isSign = $this->getRsa()->rsaVerify($prestr, trim($this->alipay_config['ali_public_key']), $sign); break; case "RSA2" : $isSign = $this->getRsa2()->rsaVerify($prestr, trim($this->alipay_config['ali_public_key']), $sign); break; default : $isSign = false; } return $isSign; } function getResponse($notify_id) { $transport = strtolower(trim($this->alipay_config['transport'])); $partner = trim($this->alipay_config['partner']); if($transport == 'https') { $veryfy_url = $this->https_verify_url; } else { $veryfy_url = $this->http_verify_url; } $veryfy_url = $veryfy_url."partner=" . $partner . "&notify_id=" . $notify_id; $responseTxt = $this->getCore()->getHttpResponseGET($veryfy_url, $this->alipay_config['cacert']); return $responseTxt; } } ?>