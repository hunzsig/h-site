<?php
 namespace plugins\Wxpay\Core; use plugins\Wxpay\AbstractLib; use plugins\Wxpay\Core\Data\WxPayUnifiedOrder; use plugins\Wxpay\Core\Data\WxPayResults; use plugins\Wxpay\Core\Data\WxPayOrderQuery; use plugins\Wxpay\Core\Data\WxPayCloseOrder; use plugins\Wxpay\Core\Data\WxPayReport; use plugins\Wxpay\Core\Data\WxPayRefund; use plugins\Wxpay\Core\Data\WxPayRefundQuery; use plugins\Wxpay\Core\Data\WxPayBizPayUrl; use plugins\Wxpay\Core\Data\WxPayDownloadBill; use plugins\Wxpay\Core\Data\WxPayReverse; use plugins\Wxpay\Core\Data\WxPayMicroPay; use plugins\Wxpay\Core\Data\WxPayShortUrl; class WxPayApi extends AbstractLib { public function unifiedOrder($inputObj, $timeOut = 6) { $url = "https://api.mch.weixin.qq.com/pay/unifiedorder"; if (!$inputObj->IsOut_trade_noSet()) { throw new WxPayException("缺少统一支付接口必填参数out_trade_no！"); } else if (!$inputObj->IsBodySet()) { throw new WxPayException("缺少统一支付接口必填参数body！"); } else if (!$inputObj->IsTotal_feeSet()) { throw new WxPayException("缺少统一支付接口必填参数total_fee！"); } else if (!$inputObj->IsTrade_typeSet()) { throw new WxPayException("缺少统一支付接口必填参数trade_type！"); } if ($inputObj->GetTrade_type() == "JSAPI" && !$inputObj->IsOpenidSet()) { throw new WxPayException("统一支付接口中，缺少必填参数openid！trade_type为JSAPI时，openid为必填参数！"); } if ($inputObj->GetTrade_type() == "NATIVE" && !$inputObj->IsProduct_idSet()) { throw new WxPayException("统一支付接口中，缺少必填参数product_id！trade_type为JSAPI时，product_id为必填参数！"); } if (!$inputObj->IsNotify_urlSet()) { $inputObj->SetNotify_url($this->getConfigs('notify_url')); } $inputObj->SetAppid($this->getConfigs('appid')); $inputObj->SetMch_id($this->getConfigs('mchid')); $inputObj->SetSpbill_create_ip($this->getConfigs('ip')); $inputObj->SetNonce_str($this->getNonceStr()); $inputObj->SetSign(); $xml = $inputObj->ToXml(); $startTimeStamp = $this->getMillisecond(); $response = $this->postXmlCurl($xml, $url, false, $timeOut); $result = WxPayResults::Init($response, $this->getConfigs()); $this->reportCostTime($url, $startTimeStamp, $result); if ($result['return_code'] == 'FAIL') { throw new WxPayException($result['return_msg']); } if ($result['result_code'] == 'FAIL') { throw new WxPayException($result['err_code_des']); } return $result; } public function orderQuery($inputObj, $timeOut = 6) { $url = "https://api.mch.weixin.qq.com/pay/orderquery"; if (!$inputObj->IsOut_trade_noSet() && !$inputObj->IsTransaction_idSet()) { throw new WxPayException("订单查询接口中，out_trade_no、transaction_id至少填一个！"); } $inputObj->SetAppid($this->getConfigs('appid')); $inputObj->SetMch_id($this->getConfigs('mchid')); $inputObj->SetNonce_str($this->getNonceStr()); $inputObj->SetSign(); $xml = $inputObj->ToXml(); $startTimeStamp = $this->getMillisecond(); $response = $this->postXmlCurl($xml, $url, false, $timeOut); $result = WxPayResults::Init($response, $this->getConfigs()); $this->reportCostTime($url, $startTimeStamp, $result); return $result; } public function closeOrder($inputObj, $timeOut = 6) { $url = "https://api.mch.weixin.qq.com/pay/closeorder"; if (!$inputObj->IsOut_trade_noSet()) { throw new WxPayException("订单查询接口中，out_trade_no必填！"); } $inputObj->SetAppid($this->getConfigs('appid')); $inputObj->SetMch_id($this->getConfigs('mchid')); $inputObj->SetNonce_str($this->getNonceStr()); $inputObj->SetSign(); $xml = $inputObj->ToXml(); $startTimeStamp = $this->getMillisecond(); $response = $this->postXmlCurl($xml, $url, false, $timeOut); $result = WxPayResults::Init($response, $this->getConfigs()); $this->reportCostTime($url, $startTimeStamp, $result); return $result; } public function refund($inputObj, $timeOut = 6) { $url = "https://api.mch.weixin.qq.com/secapi/pay/refund"; if (!$inputObj->IsOut_trade_noSet() && !$inputObj->IsTransaction_idSet()) { throw new WxPayException("退款申请接口中，out_trade_no、transaction_id至少填一个！"); } else if (!$inputObj->IsOut_refund_noSet()) { throw new WxPayException("退款申请接口中，缺少必填参数out_refund_no！"); } else if (!$inputObj->IsTotal_feeSet()) { throw new WxPayException("退款申请接口中，缺少必填参数total_fee！"); } else if (!$inputObj->IsRefund_feeSet()) { throw new WxPayException("退款申请接口中，缺少必填参数refund_fee！"); } else if (!$inputObj->IsOp_user_idSet()) { throw new WxPayException("退款申请接口中，缺少必填参数op_user_id！"); } $inputObj->SetAppid($this->getConfigs('appid')); $inputObj->SetMch_id($this->getConfigs('mchid')); $inputObj->SetNonce_str($this->getNonceStr()); $inputObj->SetSign(); $xml = $inputObj->ToXml(); $startTimeStamp = $this->getMillisecond(); $response = $this->postXmlCurl($xml, $url, false, $timeOut); $result = WxPayResults::Init($response, $this->getConfigs()); $this->reportCostTime($url, $startTimeStamp, $result); return $result; } public function refundQuery($inputObj, $timeOut = 6) { $url = "https://api.mch.weixin.qq.com/pay/refundquery"; if (!$inputObj->IsOut_refund_noSet() && !$inputObj->IsOut_trade_noSet() && !$inputObj->IsTransaction_idSet() && !$inputObj->IsRefund_idSet()) { throw new WxPayException("退款查询接口中，out_refund_no、out_trade_no、transaction_id、refund_id四个参数必填一个！"); } $inputObj->SetAppid($this->getConfigs('appid')); $inputObj->SetMch_id($this->getConfigs('mchid')); $inputObj->SetNonce_str($this->getNonceStr()); $inputObj->SetSign(); $xml = $inputObj->ToXml(); $startTimeStamp = $this->getMillisecond(); $response = $this->postXmlCurl($xml, $url, false, $timeOut); $result = WxPayResults::Init($response, $this->getConfigs()); $this->reportCostTime($url, $startTimeStamp, $result); return $result; } public function downloadBill($inputObj, $timeOut = 6) { $url = "https://api.mch.weixin.qq.com/pay/downloadbill"; if (!$inputObj->IsBill_dateSet()) { throw new WxPayException("对账单接口中，缺少必填参数bill_date！"); } $inputObj->SetAppid($this->getConfigs('appid')); $inputObj->SetMch_id($this->getConfigs('mchid')); $inputObj->SetNonce_str($this->getNonceStr()); $inputObj->SetSign(); $xml = $inputObj->ToXml(); $response = $this->postXmlCurl($xml, $url, false, $timeOut); if (substr($response, 0, 5) == "<xml>") { return ""; } return $response; } public function micropay($inputObj, $timeOut = 10) { $url = "https://api.mch.weixin.qq.com/pay/micropay"; if (!$inputObj->IsBodySet()) { throw new WxPayException("提交被扫支付API接口中，缺少必填参数body！"); } else if (!$inputObj->IsOut_trade_noSet()) { throw new WxPayException("提交被扫支付API接口中，缺少必填参数out_trade_no！"); } else if (!$inputObj->IsTotal_feeSet()) { throw new WxPayException("提交被扫支付API接口中，缺少必填参数total_fee！"); } else if (!$inputObj->IsAuth_codeSet()) { throw new WxPayException("提交被扫支付API接口中，缺少必填参数auth_code！"); } $inputObj->SetSpbill_create_ip($this->getConfigs('ip')); $inputObj->SetAppid($this->getConfigs('appid')); $inputObj->SetMch_id($this->getConfigs('mchid')); $inputObj->SetNonce_str($this->getNonceStr()); $inputObj->SetSign(); $xml = $inputObj->ToXml(); $startTimeStamp = $this->getMillisecond(); $response = $this->postXmlCurl($xml, $url, false, $timeOut); $result = WxPayResults::Init($response, $this->getConfigs()); $this->reportCostTime($url, $startTimeStamp, $result); return $result; } public function reverse($inputObj, $timeOut = 6) { $url = "https://api.mch.weixin.qq.com/secapi/pay/reverse"; if (!$inputObj->IsOut_trade_noSet() && !$inputObj->IsTransaction_idSet()) { throw new WxPayException("撤销订单API接口中，参数out_trade_no和transaction_id必须填写一个！"); } $inputObj->SetAppid($this->getConfigs('appid')); $inputObj->SetMch_id($this->getConfigs('mchid')); $inputObj->SetNonce_str($this->getNonceStr()); $inputObj->SetSign(); $xml = $inputObj->ToXml(); $startTimeStamp = $this->getMillisecond(); $response = $this->postXmlCurl($xml, $url, true, $timeOut); $result = WxPayResults::Init($response, $this->getConfigs()); $this->reportCostTime($url, $startTimeStamp, $result); return $result; } public function report($inputObj, $timeOut = 1) { $url = "https://api.mch.weixin.qq.com/payitil/report"; if (!$inputObj->IsInterface_urlSet()) { throw new WxPayException("接口URL，缺少必填参数interface_url！"); } if (!$inputObj->IsReturn_codeSet()) { throw new WxPayException("返回状态码，缺少必填参数return_code！"); } if (!$inputObj->IsResult_codeSet()) { throw new WxPayException("业务结果，缺少必填参数result_code！"); } if (!$inputObj->IsUser_ipSet()) { throw new WxPayException("访问接口IP，缺少必填参数user_ip！"); } if (!$inputObj->IsExecute_time_Set()) { throw new WxPayException("接口耗时，缺少必填参数execute_time_！"); } $inputObj->SetAppid($this->getConfigs('appid')); $inputObj->SetMch_id($this->getConfigs('mchid')); $inputObj->SetUser_ip($this->getConfigs('ip')); $inputObj->SetTime(date("YmdHis")); $inputObj->SetNonce_str($this->getNonceStr()); $inputObj->SetSign(); $xml = $inputObj->ToXml(); $startTimeStamp = $this->getMillisecond(); $response = $this->postXmlCurl($xml, $url, false, $timeOut); return $response; } public function bizpayurl($inputObj, $timeOut = 6) { if (!$inputObj->IsProduct_idSet()) { throw new WxPayException("生成二维码，缺少必填参数product_id！"); } $inputObj->SetAppid($this->getConfigs('appid')); $inputObj->SetMch_id($this->getConfigs('mchid')); $inputObj->SetTime_stamp(time()); $inputObj->SetNonce_str($this->getNonceStr()); $inputObj->SetSign(); return $inputObj->GetValues(); } public function shorturl($inputObj, $timeOut = 6) { $url = "https://api.mch.weixin.qq.com/tools/shorturl"; if (!$inputObj->IsLong_urlSet()) { throw new WxPayException("需要转换的URL，签名用原串，传输需URL encode！"); } $inputObj->SetAppid($this->getConfigs('appid')); $inputObj->SetMch_id($this->getConfigs('mchid')); $inputObj->SetNonce_str($this->getNonceStr()); $inputObj->SetSign(); $xml = $inputObj->ToXml(); $startTimeStamp = $this->getMillisecond(); $response = $this->postXmlCurl($xml, $url, false, $timeOut); $result = WxPayResults::Init($response, $this->getConfigs()); $this->reportCostTime($url, $startTimeStamp, $result); return $result; } public function notify($callback, &$msg, $xml) { try { $result = WxPayResults::Init($xml, $this->getConfigs()); } catch (WxPayException $e) { $msg = $e->errorMessage(); return false; } return $callback ? call_user_func($callback, $result) : $result; } public function getNonceStr($length = 32) { $chars = "abcdefghijklmnopqrstuvwxyz0123456789"; $str = ""; for ($i = 0; $i < $length; $i++) { $str .= substr($chars, mt_rand(0, strlen($chars) - 1), 1); } return $str; } public function replyNotify($xml) { echo $xml; } private function reportCostTime($url, $startTimeStamp, $data) { if ($this->getConfigs('report_levenl') == 0) { return; } if ($this->getConfigs('report_levenl') == 1 && array_key_exists("return_code", $data) && $data["return_code"] == "SUCCESS" && array_key_exists("result_code", $data) && $data["result_code"] == "SUCCESS") { return; } $endTimeStamp = $this->getMillisecond(); $objInput = new WxPayReport(); $objInput->SetInterface_url($url); $objInput->SetExecute_time_($endTimeStamp - $startTimeStamp); if (array_key_exists("return_code", $data)) { $objInput->SetReturn_code($data["return_code"]); } if (array_key_exists("return_msg", $data)) { $objInput->SetReturn_msg($data["return_msg"]); } if (array_key_exists("result_code", $data)) { $objInput->SetResult_code($data["result_code"]); } if (array_key_exists("err_code", $data)) { $objInput->SetErr_code($data["err_code"]); } if (array_key_exists("err_code_des", $data)) { $objInput->SetErr_code_des($data["err_code_des"]); } if (array_key_exists("out_trade_no", $data)) { $objInput->SetOut_trade_no($data["out_trade_no"]); } if (array_key_exists("device_info", $data)) { $objInput->SetDevice_info($data["device_info"]); } try { $this->report($objInput); } catch (WxPayException $e) { } } private function postXmlCurl($xml, $url, $useCert = false, $second = 30) { $ch = curl_init(); curl_setopt($ch, CURLOPT_TIMEOUT, $second); if ($this->getConfigs('curl_proxy_host') != "0.0.0.0" && $this->getConfigs('curl_proxy_port') != 0) { curl_setopt($ch, CURLOPT_PROXY, $this->getConfigs('curl_proxy_host')); curl_setopt($ch, CURLOPT_PROXYPORT, $this->getConfigs('curl_proxy_port')); } curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2); curl_setopt($ch, CURLOPT_HEADER, FALSE); curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); if ($useCert == true) { curl_setopt($ch, CURLOPT_SSLCERTTYPE, 'PEM'); curl_setopt($ch, CURLOPT_SSLCERT, $this->getConfigs('ssl_cert')); var_dump($this->getConfigs('ssl_cert')); curl_setopt($ch, CURLOPT_SSLKEYTYPE, 'PEM'); curl_setopt($ch, CURLOPT_SSLKEY, $this->getConfigs('ssl_key')); } curl_setopt($ch, CURLOPT_POST, TRUE); curl_setopt($ch, CURLOPT_POSTFIELDS, $xml); $data = curl_exec($ch); if ($data) { return $data; } else { $error = curl_error($ch); $errno = curl_errno($ch); curl_close($ch); throw new WxPayException("curl出错，错误信息：$error 错误码:$errno"); } } private function getMillisecond() { $time = explode(" ", $this->getConfigs('micronow')); $time = $time[1] . ($time[0] * 1000); $time2 = explode(".", $time); $time = $time2[0]; return $time; } } 